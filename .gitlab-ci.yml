image: docker:latest

variables:

stages:
  - build
  - publish

Build:
  stage: build
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_AUTHOR =~ /^fluxcdbot /
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  before_script:
    # docker login asks for the password to be passed through stdin for security
    # we use $CI_REGISTRY_PASSWORD here which is a special variable provided by GitLab
    # https://docs.gitlab.com/ce/ci/variables/predefined_variables.html
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # fetches the latest image (not failing if image is not found)
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    # builds the project, passing proxy variables, using OCI labels
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to
    # the GitLab registry
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHORT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    # Tag it as a CI image
    - export NODE_PACKAGE_VERSION=`jq -r ".version" package.json`
    - echo $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-ci.$CI_PIPELINE_ID
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-ci.$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-ci.$CI_PIPELINE_ID
    - echo $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-ci
    - docker tag $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-ci.$CI_PIPELINE_ID $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-ci
    - docker push $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-ci

# Tag the "main" branch as "latest"
Publish Latest:
  variables:
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  stage: publish
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_AUTHOR =~ /^fluxcdbot /
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    # docker login asks for the password to be passed through stdin for security
    # we use $CI_REGISTRY_PASSWORD here which is a special variable provided by GitLab
    # https://docs.gitlab.com/ce/ci/variables/predefined_variables.html
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    # Then we tag it "latest"
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest
    # And we push it.
    - docker push $CI_REGISTRY_IMAGE:latest

# Tag an image as preview
Publish Preview:
  stage: publish
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_AUTHOR =~ /^fluxcdbot /
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  before_script:
    # docker login asks for the password to be passed through stdin for security
    # we use $CI_REGISTRY_PASSWORD here which is a special variable provided by GitLab
    # https://docs.gitlab.com/ce/ci/variables/predefined_variables.html
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - export NODE_PACKAGE_VERSION=`jq -r ".version" package.json`
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    # Tag it as a preview image
    - export NODE_PACKAGE_VERSION=`jq -r ".version" package.json`
    - echo $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-preview.$CI_PIPELINE_ID
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-preview.$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-preview.$CI_PIPELINE_ID
    - echo $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-preview
    - docker tag $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-preview.$CI_PIPELINE_ID $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-preview
    - docker push $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION-preview

# Add a Docker tag for any Git tag
Publish Release:
  stage: publish
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_AUTHOR =~ /^fluxcdbot /
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  before_script:
    # docker login asks for the password to be passed through stdin for security
    # we use $CI_REGISTRY_PASSWORD here which is a special variable provided by GitLab
    # https://docs.gitlab.com/ce/ci/variables/predefined_variables.html
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - export NODE_PACKAGE_VERSION=`jq -r ".version" package.json`
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - export NODE_PACKAGE_VERSION=`jq -r ".version" package.json`
    - echo $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION
    - docker push $CI_REGISTRY_IMAGE:$NODE_PACKAGE_VERSION
